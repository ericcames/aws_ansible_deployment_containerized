---
- name: Looking up Subnet_id
  register: subnet_id
  amazon.aws.ec2_vpc_subnet_info:
    region: "{{ region }}"
    filters:
      tag:Name: "{{ subnet_name }}"

- name: Setting vpc_subnet_id based on Lookup
  when: vpc_subnet_id is undefined
  ansible.builtin.set_fact:
    vpc_subnet_id: "{{ subnet_id.subnets[0].id }}"

- name: Creating machine instance
  register: ec2_vms
  amazon.aws.ec2_instance:
    name: Ansible Automation Platform
    region: "{{ region }}"
    key_name: "{{ my_ssh_key }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    instance_type: "{{ instance_type }}"
    security_group: "{{ ec2_security_group_name }}"
    network:
      assign_public_ip: "{{ assign_public_ip }}"
    image_id: "{{ image }}"
    tags:
      Environment: AAP_Deployment
      AlwaysUp: "{{ alwaysup }}"
      Createdby: Ansible Controller
      Contact: "{{ my_email_address }}"
      DeletebBy: "{{ ec2_ansible_group }}"
    wait: true
    wait_timeout: 600

- name: Create the storage volume we need
  loop: "{{ ec2_vms['instances'] }}"
  amazon.aws.ec2_vol:
    instance: "{{ item['instance_id'] }}"
    volume_size: 100
    name: My Controller Volume
    device_name: /dev/sdf
    region: "{{ region }}"
    delete_on_termination: true
    volume_type: gp3
    iops: 3000

- name: Ensure we have an elastic ip for each controller
  register: ec2_eips
  loop: "{{ ec2_vms['instances'] }}"
  amazon.aws.ec2_eip:
    device_id: "{{ item['instance_id'] }}"
    region: "{{ region }}"
    tag_name: reserved_for
    tag_value: "{{ item['instance_id'] }}"
    release_on_disassociation: true

- name: Wait 300 seconds for port 22 to become open and contain "OpenSSH"
  loop: "{{ ec2_eips['results'] }}"
  ansible.builtin.wait_for:
    port: 22
    host: "{{ item['public_ip'] }}"
    search_regex: OpenSSH
    delay: 10
